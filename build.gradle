plugins {
    id "java"
    id "org.springframework.boot" version "3.4.5"
    id "io.spring.dependency-management" version "1.1.7"
}

group = "com.kush.todo"
version = "0.0.1-SNAPSHOT"
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
ext {
    mapStructVersion = "1.6.3"
    springDocVersion = "2.8.6"
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    implementation "org.liquibase:liquibase-core"
    implementation "org.postgresql:postgresql"
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"

    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-testcontainers"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"

    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

tasks.named("test") {
    useJUnitPlatform()
}

sourceSets {
    integration {
        java.srcDir "$projectDir/src/integration/java"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}

tasks.register("integrationTest", Test) {
    useJUnitPlatform()

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

rootProject.tasks.named("processIntegrationResources") {
    duplicatesStrategy = "include"
}

if (System.properties["test.profile"] == "integration") {
    check.dependsOn integrationTest
    integrationTest.mustRunAfter test
}